// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"nickygin.com/third_party/gen/models"
)

func newRcQueue(db *gorm.DB, opts ...gen.DOOption) rcQueue {
	_rcQueue := rcQueue{}

	_rcQueue.rcQueueDo.UseDB(db, opts...)
	_rcQueue.rcQueueDo.UseModel(&models.RcQueue{})

	tableName := _rcQueue.rcQueueDo.TableName()
	_rcQueue.ALL = field.NewAsterisk(tableName)
	_rcQueue.ID = field.NewInt32(tableName, "id")
	_rcQueue.KnowledgeID = field.NewInt32(tableName, "knowledge_id")
	_rcQueue.CreatedOn = field.NewTime(tableName, "created_on")
	_rcQueue.CreatedBy = field.NewString(tableName, "created_by")
	_rcQueue.ModifiedOn = field.NewTime(tableName, "modified_on")
	_rcQueue.ModifiedBy = field.NewString(tableName, "modified_by")
	_rcQueue.DeletedOn = field.NewTime(tableName, "deleted_on")
	_rcQueue.IsDel = field.NewInt32(tableName, "is_del")
	_rcQueue.RcOn = field.NewInt32(tableName, "rc_on")

	_rcQueue.fillFieldMap()

	return _rcQueue
}

// rcQueue 背诵队列
type rcQueue struct {
	rcQueueDo rcQueueDo

	ALL         field.Asterisk
	ID          field.Int32
	KnowledgeID field.Int32  // 单词_id
	CreatedOn   field.Time   // 新建时间
	CreatedBy   field.String // 创建人
	ModifiedOn  field.Time   // 修改时间
	ModifiedBy  field.String // 修改人
	DeletedOn   field.Time   // 删除时间
	IsDel       field.Int32  // 是否删除 0为未删除、1为已删除
	RcOn        field.Int32

	fieldMap map[string]field.Expr
}

func (r rcQueue) Table(newTableName string) *rcQueue {
	r.rcQueueDo.UseTable(newTableName)
	return r.updateTableName(newTableName)
}

func (r rcQueue) As(alias string) *rcQueue {
	r.rcQueueDo.DO = *(r.rcQueueDo.As(alias).(*gen.DO))
	return r.updateTableName(alias)
}

func (r *rcQueue) updateTableName(table string) *rcQueue {
	r.ALL = field.NewAsterisk(table)
	r.ID = field.NewInt32(table, "id")
	r.KnowledgeID = field.NewInt32(table, "knowledge_id")
	r.CreatedOn = field.NewTime(table, "created_on")
	r.CreatedBy = field.NewString(table, "created_by")
	r.ModifiedOn = field.NewTime(table, "modified_on")
	r.ModifiedBy = field.NewString(table, "modified_by")
	r.DeletedOn = field.NewTime(table, "deleted_on")
	r.IsDel = field.NewInt32(table, "is_del")
	r.RcOn = field.NewInt32(table, "rc_on")

	r.fillFieldMap()

	return r
}

func (r *rcQueue) WithContext(ctx context.Context) *rcQueueDo { return r.rcQueueDo.WithContext(ctx) }

func (r rcQueue) TableName() string { return r.rcQueueDo.TableName() }

func (r rcQueue) Alias() string { return r.rcQueueDo.Alias() }

func (r rcQueue) Columns(cols ...field.Expr) gen.Columns { return r.rcQueueDo.Columns(cols...) }

func (r *rcQueue) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := r.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (r *rcQueue) fillFieldMap() {
	r.fieldMap = make(map[string]field.Expr, 9)
	r.fieldMap["id"] = r.ID
	r.fieldMap["knowledge_id"] = r.KnowledgeID
	r.fieldMap["created_on"] = r.CreatedOn
	r.fieldMap["created_by"] = r.CreatedBy
	r.fieldMap["modified_on"] = r.ModifiedOn
	r.fieldMap["modified_by"] = r.ModifiedBy
	r.fieldMap["deleted_on"] = r.DeletedOn
	r.fieldMap["is_del"] = r.IsDel
	r.fieldMap["rc_on"] = r.RcOn
}

func (r rcQueue) clone(db *gorm.DB) rcQueue {
	r.rcQueueDo.ReplaceConnPool(db.Statement.ConnPool)
	return r
}

func (r rcQueue) replaceDB(db *gorm.DB) rcQueue {
	r.rcQueueDo.ReplaceDB(db)
	return r
}

type rcQueueDo struct{ gen.DO }

func (r rcQueueDo) Debug() *rcQueueDo {
	return r.withDO(r.DO.Debug())
}

func (r rcQueueDo) WithContext(ctx context.Context) *rcQueueDo {
	return r.withDO(r.DO.WithContext(ctx))
}

func (r rcQueueDo) ReadDB() *rcQueueDo {
	return r.Clauses(dbresolver.Read)
}

func (r rcQueueDo) WriteDB() *rcQueueDo {
	return r.Clauses(dbresolver.Write)
}

func (r rcQueueDo) Session(config *gorm.Session) *rcQueueDo {
	return r.withDO(r.DO.Session(config))
}

func (r rcQueueDo) Clauses(conds ...clause.Expression) *rcQueueDo {
	return r.withDO(r.DO.Clauses(conds...))
}

func (r rcQueueDo) Returning(value interface{}, columns ...string) *rcQueueDo {
	return r.withDO(r.DO.Returning(value, columns...))
}

func (r rcQueueDo) Not(conds ...gen.Condition) *rcQueueDo {
	return r.withDO(r.DO.Not(conds...))
}

func (r rcQueueDo) Or(conds ...gen.Condition) *rcQueueDo {
	return r.withDO(r.DO.Or(conds...))
}

func (r rcQueueDo) Select(conds ...field.Expr) *rcQueueDo {
	return r.withDO(r.DO.Select(conds...))
}

func (r rcQueueDo) Where(conds ...gen.Condition) *rcQueueDo {
	return r.withDO(r.DO.Where(conds...))
}

func (r rcQueueDo) Order(conds ...field.Expr) *rcQueueDo {
	return r.withDO(r.DO.Order(conds...))
}

func (r rcQueueDo) Distinct(cols ...field.Expr) *rcQueueDo {
	return r.withDO(r.DO.Distinct(cols...))
}

func (r rcQueueDo) Omit(cols ...field.Expr) *rcQueueDo {
	return r.withDO(r.DO.Omit(cols...))
}

func (r rcQueueDo) Join(table schema.Tabler, on ...field.Expr) *rcQueueDo {
	return r.withDO(r.DO.Join(table, on...))
}

func (r rcQueueDo) LeftJoin(table schema.Tabler, on ...field.Expr) *rcQueueDo {
	return r.withDO(r.DO.LeftJoin(table, on...))
}

func (r rcQueueDo) RightJoin(table schema.Tabler, on ...field.Expr) *rcQueueDo {
	return r.withDO(r.DO.RightJoin(table, on...))
}

func (r rcQueueDo) Group(cols ...field.Expr) *rcQueueDo {
	return r.withDO(r.DO.Group(cols...))
}

func (r rcQueueDo) Having(conds ...gen.Condition) *rcQueueDo {
	return r.withDO(r.DO.Having(conds...))
}

func (r rcQueueDo) Limit(limit int) *rcQueueDo {
	return r.withDO(r.DO.Limit(limit))
}

func (r rcQueueDo) Offset(offset int) *rcQueueDo {
	return r.withDO(r.DO.Offset(offset))
}

func (r rcQueueDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *rcQueueDo {
	return r.withDO(r.DO.Scopes(funcs...))
}

func (r rcQueueDo) Unscoped() *rcQueueDo {
	return r.withDO(r.DO.Unscoped())
}

func (r rcQueueDo) Create(values ...*models.RcQueue) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Create(values)
}

func (r rcQueueDo) CreateInBatches(values []*models.RcQueue, batchSize int) error {
	return r.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (r rcQueueDo) Save(values ...*models.RcQueue) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Save(values)
}

func (r rcQueueDo) First() (*models.RcQueue, error) {
	if result, err := r.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.RcQueue), nil
	}
}

func (r rcQueueDo) Take() (*models.RcQueue, error) {
	if result, err := r.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.RcQueue), nil
	}
}

func (r rcQueueDo) Last() (*models.RcQueue, error) {
	if result, err := r.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.RcQueue), nil
	}
}

func (r rcQueueDo) Find() ([]*models.RcQueue, error) {
	result, err := r.DO.Find()
	return result.([]*models.RcQueue), err
}

func (r rcQueueDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.RcQueue, err error) {
	buf := make([]*models.RcQueue, 0, batchSize)
	err = r.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (r rcQueueDo) FindInBatches(result *[]*models.RcQueue, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return r.DO.FindInBatches(result, batchSize, fc)
}

func (r rcQueueDo) Attrs(attrs ...field.AssignExpr) *rcQueueDo {
	return r.withDO(r.DO.Attrs(attrs...))
}

func (r rcQueueDo) Assign(attrs ...field.AssignExpr) *rcQueueDo {
	return r.withDO(r.DO.Assign(attrs...))
}

func (r rcQueueDo) Joins(fields ...field.RelationField) *rcQueueDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Joins(_f))
	}
	return &r
}

func (r rcQueueDo) Preload(fields ...field.RelationField) *rcQueueDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Preload(_f))
	}
	return &r
}

func (r rcQueueDo) FirstOrInit() (*models.RcQueue, error) {
	if result, err := r.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.RcQueue), nil
	}
}

func (r rcQueueDo) FirstOrCreate() (*models.RcQueue, error) {
	if result, err := r.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.RcQueue), nil
	}
}

func (r rcQueueDo) FindByPage(offset int, limit int) (result []*models.RcQueue, count int64, err error) {
	result, err = r.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = r.Offset(-1).Limit(-1).Count()
	return
}

func (r rcQueueDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = r.Count()
	if err != nil {
		return
	}

	err = r.Offset(offset).Limit(limit).Scan(result)
	return
}

func (r rcQueueDo) Scan(result interface{}) (err error) {
	return r.DO.Scan(result)
}

func (r rcQueueDo) Delete(models ...*models.RcQueue) (result gen.ResultInfo, err error) {
	return r.DO.Delete(models)
}

func (r *rcQueueDo) withDO(do gen.Dao) *rcQueueDo {
	r.DO = *do.(*gen.DO)
	return r
}
