// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"nickygin.com/third_party/gen/models"
)

func newUserClass(db *gorm.DB, opts ...gen.DOOption) userClass {
	_userClass := userClass{}

	_userClass.userClassDo.UseDB(db, opts...)
	_userClass.userClassDo.UseModel(&models.UserClass{})

	tableName := _userClass.userClassDo.TableName()
	_userClass.ALL = field.NewAsterisk(tableName)
	_userClass.ID = field.NewInt32(tableName, "id")
	_userClass.CreatedOn = field.NewTime(tableName, "created_on")
	_userClass.CreatedBy = field.NewString(tableName, "created_by")
	_userClass.ModifiedOn = field.NewTime(tableName, "modified_on")
	_userClass.ModifiedBy = field.NewString(tableName, "modified_by")
	_userClass.DeletedOn = field.NewTime(tableName, "deleted_on")
	_userClass.IsDel = field.NewInt32(tableName, "is_del")
	_userClass.Title = field.NewString(tableName, "title")
	_userClass.ParentID = field.NewInt32(tableName, "parent_id")
	_userClass.EnableToRemember = field.NewBool(tableName, "enable_to_remember")

	_userClass.fillFieldMap()

	return _userClass
}

// userClass 用户笔记分类
type userClass struct {
	userClassDo userClassDo

	ALL              field.Asterisk
	ID               field.Int32
	CreatedOn        field.Time   // 新建时间
	CreatedBy        field.String // 创建人
	ModifiedOn       field.Time   // 修改时间
	ModifiedBy       field.String // 修改人
	DeletedOn        field.Time   // 删除时间
	IsDel            field.Int32  // 是否删除 0为未删除、1为已删除
	Title            field.String
	ParentID         field.Int32
	EnableToRemember field.Bool

	fieldMap map[string]field.Expr
}

func (u userClass) Table(newTableName string) *userClass {
	u.userClassDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userClass) As(alias string) *userClass {
	u.userClassDo.DO = *(u.userClassDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userClass) updateTableName(table string) *userClass {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewInt32(table, "id")
	u.CreatedOn = field.NewTime(table, "created_on")
	u.CreatedBy = field.NewString(table, "created_by")
	u.ModifiedOn = field.NewTime(table, "modified_on")
	u.ModifiedBy = field.NewString(table, "modified_by")
	u.DeletedOn = field.NewTime(table, "deleted_on")
	u.IsDel = field.NewInt32(table, "is_del")
	u.Title = field.NewString(table, "title")
	u.ParentID = field.NewInt32(table, "parent_id")
	u.EnableToRemember = field.NewBool(table, "enable_to_remember")

	u.fillFieldMap()

	return u
}

func (u *userClass) WithContext(ctx context.Context) *userClassDo {
	return u.userClassDo.WithContext(ctx)
}

func (u userClass) TableName() string { return u.userClassDo.TableName() }

func (u userClass) Alias() string { return u.userClassDo.Alias() }

func (u userClass) Columns(cols ...field.Expr) gen.Columns { return u.userClassDo.Columns(cols...) }

func (u *userClass) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userClass) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 10)
	u.fieldMap["id"] = u.ID
	u.fieldMap["created_on"] = u.CreatedOn
	u.fieldMap["created_by"] = u.CreatedBy
	u.fieldMap["modified_on"] = u.ModifiedOn
	u.fieldMap["modified_by"] = u.ModifiedBy
	u.fieldMap["deleted_on"] = u.DeletedOn
	u.fieldMap["is_del"] = u.IsDel
	u.fieldMap["title"] = u.Title
	u.fieldMap["parent_id"] = u.ParentID
	u.fieldMap["enable_to_remember"] = u.EnableToRemember
}

func (u userClass) clone(db *gorm.DB) userClass {
	u.userClassDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u userClass) replaceDB(db *gorm.DB) userClass {
	u.userClassDo.ReplaceDB(db)
	return u
}

type userClassDo struct{ gen.DO }

func (u userClassDo) Debug() *userClassDo {
	return u.withDO(u.DO.Debug())
}

func (u userClassDo) WithContext(ctx context.Context) *userClassDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userClassDo) ReadDB() *userClassDo {
	return u.Clauses(dbresolver.Read)
}

func (u userClassDo) WriteDB() *userClassDo {
	return u.Clauses(dbresolver.Write)
}

func (u userClassDo) Session(config *gorm.Session) *userClassDo {
	return u.withDO(u.DO.Session(config))
}

func (u userClassDo) Clauses(conds ...clause.Expression) *userClassDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userClassDo) Returning(value interface{}, columns ...string) *userClassDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userClassDo) Not(conds ...gen.Condition) *userClassDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userClassDo) Or(conds ...gen.Condition) *userClassDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userClassDo) Select(conds ...field.Expr) *userClassDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userClassDo) Where(conds ...gen.Condition) *userClassDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userClassDo) Order(conds ...field.Expr) *userClassDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userClassDo) Distinct(cols ...field.Expr) *userClassDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userClassDo) Omit(cols ...field.Expr) *userClassDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userClassDo) Join(table schema.Tabler, on ...field.Expr) *userClassDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userClassDo) LeftJoin(table schema.Tabler, on ...field.Expr) *userClassDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userClassDo) RightJoin(table schema.Tabler, on ...field.Expr) *userClassDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userClassDo) Group(cols ...field.Expr) *userClassDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userClassDo) Having(conds ...gen.Condition) *userClassDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userClassDo) Limit(limit int) *userClassDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userClassDo) Offset(offset int) *userClassDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userClassDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *userClassDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userClassDo) Unscoped() *userClassDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userClassDo) Create(values ...*models.UserClass) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userClassDo) CreateInBatches(values []*models.UserClass, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userClassDo) Save(values ...*models.UserClass) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userClassDo) First() (*models.UserClass, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.UserClass), nil
	}
}

func (u userClassDo) Take() (*models.UserClass, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.UserClass), nil
	}
}

func (u userClassDo) Last() (*models.UserClass, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.UserClass), nil
	}
}

func (u userClassDo) Find() ([]*models.UserClass, error) {
	result, err := u.DO.Find()
	return result.([]*models.UserClass), err
}

func (u userClassDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.UserClass, err error) {
	buf := make([]*models.UserClass, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userClassDo) FindInBatches(result *[]*models.UserClass, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userClassDo) Attrs(attrs ...field.AssignExpr) *userClassDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userClassDo) Assign(attrs ...field.AssignExpr) *userClassDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userClassDo) Joins(fields ...field.RelationField) *userClassDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userClassDo) Preload(fields ...field.RelationField) *userClassDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userClassDo) FirstOrInit() (*models.UserClass, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.UserClass), nil
	}
}

func (u userClassDo) FirstOrCreate() (*models.UserClass, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.UserClass), nil
	}
}

func (u userClassDo) FindByPage(offset int, limit int) (result []*models.UserClass, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userClassDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userClassDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userClassDo) Delete(models ...*models.UserClass) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userClassDo) withDO(do gen.Dao) *userClassDo {
	u.DO = *do.(*gen.DO)
	return u
}
