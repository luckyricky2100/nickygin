// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"nickygin.com/third_party/gen/models"
)

func newUserKnowledge(db *gorm.DB, opts ...gen.DOOption) userKnowledge {
	_userKnowledge := userKnowledge{}

	_userKnowledge.userKnowledgeDo.UseDB(db, opts...)
	_userKnowledge.userKnowledgeDo.UseModel(&models.UserKnowledge{})

	tableName := _userKnowledge.userKnowledgeDo.TableName()
	_userKnowledge.ALL = field.NewAsterisk(tableName)
	_userKnowledge.ID = field.NewInt32(tableName, "id")
	_userKnowledge.CreatedOn = field.NewTime(tableName, "created_on")
	_userKnowledge.CreatedBy = field.NewString(tableName, "created_by")
	_userKnowledge.ModifiedOn = field.NewTime(tableName, "modified_on")
	_userKnowledge.ModifiedBy = field.NewString(tableName, "modified_by")
	_userKnowledge.DeletedOn = field.NewTime(tableName, "deleted_on")
	_userKnowledge.IsDel = field.NewInt32(tableName, "is_del")
	_userKnowledge.Title = field.NewString(tableName, "title")
	_userKnowledge.Content = field.NewString(tableName, "content")
	_userKnowledge.Note = field.NewString(tableName, "note")
	_userKnowledge.Relevention = field.NewString(tableName, "relevention")
	_userKnowledge.RecordType = field.NewInt32(tableName, "record_type")

	_userKnowledge.fillFieldMap()

	return _userKnowledge
}

// userKnowledge 用户笔记
type userKnowledge struct {
	userKnowledgeDo userKnowledgeDo

	ALL         field.Asterisk
	ID          field.Int32
	CreatedOn   field.Time   // 新建时间
	CreatedBy   field.String // 创建人
	ModifiedOn  field.Time   // 修改时间
	ModifiedBy  field.String // 修改人
	DeletedOn   field.Time   // 删除时间
	IsDel       field.Int32  // 是否删除 0为未删除、1为已删除
	Title       field.String
	Content     field.String
	Note        field.String
	Relevention field.String
	RecordType  field.Int32

	fieldMap map[string]field.Expr
}

func (u userKnowledge) Table(newTableName string) *userKnowledge {
	u.userKnowledgeDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userKnowledge) As(alias string) *userKnowledge {
	u.userKnowledgeDo.DO = *(u.userKnowledgeDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userKnowledge) updateTableName(table string) *userKnowledge {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewInt32(table, "id")
	u.CreatedOn = field.NewTime(table, "created_on")
	u.CreatedBy = field.NewString(table, "created_by")
	u.ModifiedOn = field.NewTime(table, "modified_on")
	u.ModifiedBy = field.NewString(table, "modified_by")
	u.DeletedOn = field.NewTime(table, "deleted_on")
	u.IsDel = field.NewInt32(table, "is_del")
	u.Title = field.NewString(table, "title")
	u.Content = field.NewString(table, "content")
	u.Note = field.NewString(table, "note")
	u.Relevention = field.NewString(table, "relevention")
	u.RecordType = field.NewInt32(table, "record_type")

	u.fillFieldMap()

	return u
}

func (u *userKnowledge) WithContext(ctx context.Context) *userKnowledgeDo {
	return u.userKnowledgeDo.WithContext(ctx)
}

func (u userKnowledge) TableName() string { return u.userKnowledgeDo.TableName() }

func (u userKnowledge) Alias() string { return u.userKnowledgeDo.Alias() }

func (u userKnowledge) Columns(cols ...field.Expr) gen.Columns {
	return u.userKnowledgeDo.Columns(cols...)
}

func (u *userKnowledge) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userKnowledge) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 12)
	u.fieldMap["id"] = u.ID
	u.fieldMap["created_on"] = u.CreatedOn
	u.fieldMap["created_by"] = u.CreatedBy
	u.fieldMap["modified_on"] = u.ModifiedOn
	u.fieldMap["modified_by"] = u.ModifiedBy
	u.fieldMap["deleted_on"] = u.DeletedOn
	u.fieldMap["is_del"] = u.IsDel
	u.fieldMap["title"] = u.Title
	u.fieldMap["content"] = u.Content
	u.fieldMap["note"] = u.Note
	u.fieldMap["relevention"] = u.Relevention
	u.fieldMap["record_type"] = u.RecordType
}

func (u userKnowledge) clone(db *gorm.DB) userKnowledge {
	u.userKnowledgeDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u userKnowledge) replaceDB(db *gorm.DB) userKnowledge {
	u.userKnowledgeDo.ReplaceDB(db)
	return u
}

type userKnowledgeDo struct{ gen.DO }

func (u userKnowledgeDo) Debug() *userKnowledgeDo {
	return u.withDO(u.DO.Debug())
}

func (u userKnowledgeDo) WithContext(ctx context.Context) *userKnowledgeDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userKnowledgeDo) ReadDB() *userKnowledgeDo {
	return u.Clauses(dbresolver.Read)
}

func (u userKnowledgeDo) WriteDB() *userKnowledgeDo {
	return u.Clauses(dbresolver.Write)
}

func (u userKnowledgeDo) Session(config *gorm.Session) *userKnowledgeDo {
	return u.withDO(u.DO.Session(config))
}

func (u userKnowledgeDo) Clauses(conds ...clause.Expression) *userKnowledgeDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userKnowledgeDo) Returning(value interface{}, columns ...string) *userKnowledgeDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userKnowledgeDo) Not(conds ...gen.Condition) *userKnowledgeDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userKnowledgeDo) Or(conds ...gen.Condition) *userKnowledgeDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userKnowledgeDo) Select(conds ...field.Expr) *userKnowledgeDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userKnowledgeDo) Where(conds ...gen.Condition) *userKnowledgeDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userKnowledgeDo) Order(conds ...field.Expr) *userKnowledgeDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userKnowledgeDo) Distinct(cols ...field.Expr) *userKnowledgeDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userKnowledgeDo) Omit(cols ...field.Expr) *userKnowledgeDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userKnowledgeDo) Join(table schema.Tabler, on ...field.Expr) *userKnowledgeDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userKnowledgeDo) LeftJoin(table schema.Tabler, on ...field.Expr) *userKnowledgeDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userKnowledgeDo) RightJoin(table schema.Tabler, on ...field.Expr) *userKnowledgeDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userKnowledgeDo) Group(cols ...field.Expr) *userKnowledgeDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userKnowledgeDo) Having(conds ...gen.Condition) *userKnowledgeDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userKnowledgeDo) Limit(limit int) *userKnowledgeDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userKnowledgeDo) Offset(offset int) *userKnowledgeDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userKnowledgeDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *userKnowledgeDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userKnowledgeDo) Unscoped() *userKnowledgeDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userKnowledgeDo) Create(values ...*models.UserKnowledge) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userKnowledgeDo) CreateInBatches(values []*models.UserKnowledge, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userKnowledgeDo) Save(values ...*models.UserKnowledge) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userKnowledgeDo) First() (*models.UserKnowledge, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.UserKnowledge), nil
	}
}

func (u userKnowledgeDo) Take() (*models.UserKnowledge, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.UserKnowledge), nil
	}
}

func (u userKnowledgeDo) Last() (*models.UserKnowledge, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.UserKnowledge), nil
	}
}

func (u userKnowledgeDo) Find() ([]*models.UserKnowledge, error) {
	result, err := u.DO.Find()
	return result.([]*models.UserKnowledge), err
}

func (u userKnowledgeDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.UserKnowledge, err error) {
	buf := make([]*models.UserKnowledge, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userKnowledgeDo) FindInBatches(result *[]*models.UserKnowledge, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userKnowledgeDo) Attrs(attrs ...field.AssignExpr) *userKnowledgeDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userKnowledgeDo) Assign(attrs ...field.AssignExpr) *userKnowledgeDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userKnowledgeDo) Joins(fields ...field.RelationField) *userKnowledgeDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userKnowledgeDo) Preload(fields ...field.RelationField) *userKnowledgeDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userKnowledgeDo) FirstOrInit() (*models.UserKnowledge, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.UserKnowledge), nil
	}
}

func (u userKnowledgeDo) FirstOrCreate() (*models.UserKnowledge, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.UserKnowledge), nil
	}
}

func (u userKnowledgeDo) FindByPage(offset int, limit int) (result []*models.UserKnowledge, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userKnowledgeDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userKnowledgeDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userKnowledgeDo) Delete(models ...*models.UserKnowledge) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userKnowledgeDo) withDO(do gen.Dao) *userKnowledgeDo {
	u.DO = *do.(*gen.DO)
	return u
}
