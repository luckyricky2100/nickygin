// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"nickygin.com/third_party/gen/models"
)

func newUserClassKnowledge(db *gorm.DB, opts ...gen.DOOption) userClassKnowledge {
	_userClassKnowledge := userClassKnowledge{}

	_userClassKnowledge.userClassKnowledgeDo.UseDB(db, opts...)
	_userClassKnowledge.userClassKnowledgeDo.UseModel(&models.UserClassKnowledge{})

	tableName := _userClassKnowledge.userClassKnowledgeDo.TableName()
	_userClassKnowledge.ALL = field.NewAsterisk(tableName)
	_userClassKnowledge.ID = field.NewInt32(tableName, "id")
	_userClassKnowledge.CreatedOn = field.NewTime(tableName, "created_on")
	_userClassKnowledge.CreatedBy = field.NewString(tableName, "created_by")
	_userClassKnowledge.ModifiedOn = field.NewTime(tableName, "modified_on")
	_userClassKnowledge.ModifiedBy = field.NewString(tableName, "modified_by")
	_userClassKnowledge.DeletedOn = field.NewTime(tableName, "deleted_on")
	_userClassKnowledge.IsDel = field.NewInt32(tableName, "is_del")
	_userClassKnowledge.ClassID = field.NewInt32(tableName, "class_id")
	_userClassKnowledge.KnowledgeID = field.NewInt32(tableName, "knowledge_id")

	_userClassKnowledge.fillFieldMap()

	return _userClassKnowledge
}

// userClassKnowledge 分类知识关系
type userClassKnowledge struct {
	userClassKnowledgeDo userClassKnowledgeDo

	ALL         field.Asterisk
	ID          field.Int32
	CreatedOn   field.Time   // 新建时间
	CreatedBy   field.String // 创建人
	ModifiedOn  field.Time   // 修改时间
	ModifiedBy  field.String // 修改人
	DeletedOn   field.Time   // 删除时间
	IsDel       field.Int32  // 是否删除 0为未删除、1为已删除
	ClassID     field.Int32
	KnowledgeID field.Int32

	fieldMap map[string]field.Expr
}

func (u userClassKnowledge) Table(newTableName string) *userClassKnowledge {
	u.userClassKnowledgeDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userClassKnowledge) As(alias string) *userClassKnowledge {
	u.userClassKnowledgeDo.DO = *(u.userClassKnowledgeDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userClassKnowledge) updateTableName(table string) *userClassKnowledge {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewInt32(table, "id")
	u.CreatedOn = field.NewTime(table, "created_on")
	u.CreatedBy = field.NewString(table, "created_by")
	u.ModifiedOn = field.NewTime(table, "modified_on")
	u.ModifiedBy = field.NewString(table, "modified_by")
	u.DeletedOn = field.NewTime(table, "deleted_on")
	u.IsDel = field.NewInt32(table, "is_del")
	u.ClassID = field.NewInt32(table, "class_id")
	u.KnowledgeID = field.NewInt32(table, "knowledge_id")

	u.fillFieldMap()

	return u
}

func (u *userClassKnowledge) WithContext(ctx context.Context) *userClassKnowledgeDo {
	return u.userClassKnowledgeDo.WithContext(ctx)
}

func (u userClassKnowledge) TableName() string { return u.userClassKnowledgeDo.TableName() }

func (u userClassKnowledge) Alias() string { return u.userClassKnowledgeDo.Alias() }

func (u userClassKnowledge) Columns(cols ...field.Expr) gen.Columns {
	return u.userClassKnowledgeDo.Columns(cols...)
}

func (u *userClassKnowledge) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userClassKnowledge) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 9)
	u.fieldMap["id"] = u.ID
	u.fieldMap["created_on"] = u.CreatedOn
	u.fieldMap["created_by"] = u.CreatedBy
	u.fieldMap["modified_on"] = u.ModifiedOn
	u.fieldMap["modified_by"] = u.ModifiedBy
	u.fieldMap["deleted_on"] = u.DeletedOn
	u.fieldMap["is_del"] = u.IsDel
	u.fieldMap["class_id"] = u.ClassID
	u.fieldMap["knowledge_id"] = u.KnowledgeID
}

func (u userClassKnowledge) clone(db *gorm.DB) userClassKnowledge {
	u.userClassKnowledgeDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u userClassKnowledge) replaceDB(db *gorm.DB) userClassKnowledge {
	u.userClassKnowledgeDo.ReplaceDB(db)
	return u
}

type userClassKnowledgeDo struct{ gen.DO }

func (u userClassKnowledgeDo) Debug() *userClassKnowledgeDo {
	return u.withDO(u.DO.Debug())
}

func (u userClassKnowledgeDo) WithContext(ctx context.Context) *userClassKnowledgeDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userClassKnowledgeDo) ReadDB() *userClassKnowledgeDo {
	return u.Clauses(dbresolver.Read)
}

func (u userClassKnowledgeDo) WriteDB() *userClassKnowledgeDo {
	return u.Clauses(dbresolver.Write)
}

func (u userClassKnowledgeDo) Session(config *gorm.Session) *userClassKnowledgeDo {
	return u.withDO(u.DO.Session(config))
}

func (u userClassKnowledgeDo) Clauses(conds ...clause.Expression) *userClassKnowledgeDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userClassKnowledgeDo) Returning(value interface{}, columns ...string) *userClassKnowledgeDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userClassKnowledgeDo) Not(conds ...gen.Condition) *userClassKnowledgeDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userClassKnowledgeDo) Or(conds ...gen.Condition) *userClassKnowledgeDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userClassKnowledgeDo) Select(conds ...field.Expr) *userClassKnowledgeDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userClassKnowledgeDo) Where(conds ...gen.Condition) *userClassKnowledgeDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userClassKnowledgeDo) Order(conds ...field.Expr) *userClassKnowledgeDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userClassKnowledgeDo) Distinct(cols ...field.Expr) *userClassKnowledgeDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userClassKnowledgeDo) Omit(cols ...field.Expr) *userClassKnowledgeDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userClassKnowledgeDo) Join(table schema.Tabler, on ...field.Expr) *userClassKnowledgeDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userClassKnowledgeDo) LeftJoin(table schema.Tabler, on ...field.Expr) *userClassKnowledgeDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userClassKnowledgeDo) RightJoin(table schema.Tabler, on ...field.Expr) *userClassKnowledgeDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userClassKnowledgeDo) Group(cols ...field.Expr) *userClassKnowledgeDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userClassKnowledgeDo) Having(conds ...gen.Condition) *userClassKnowledgeDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userClassKnowledgeDo) Limit(limit int) *userClassKnowledgeDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userClassKnowledgeDo) Offset(offset int) *userClassKnowledgeDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userClassKnowledgeDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *userClassKnowledgeDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userClassKnowledgeDo) Unscoped() *userClassKnowledgeDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userClassKnowledgeDo) Create(values ...*models.UserClassKnowledge) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userClassKnowledgeDo) CreateInBatches(values []*models.UserClassKnowledge, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userClassKnowledgeDo) Save(values ...*models.UserClassKnowledge) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userClassKnowledgeDo) First() (*models.UserClassKnowledge, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.UserClassKnowledge), nil
	}
}

func (u userClassKnowledgeDo) Take() (*models.UserClassKnowledge, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.UserClassKnowledge), nil
	}
}

func (u userClassKnowledgeDo) Last() (*models.UserClassKnowledge, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.UserClassKnowledge), nil
	}
}

func (u userClassKnowledgeDo) Find() ([]*models.UserClassKnowledge, error) {
	result, err := u.DO.Find()
	return result.([]*models.UserClassKnowledge), err
}

func (u userClassKnowledgeDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.UserClassKnowledge, err error) {
	buf := make([]*models.UserClassKnowledge, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userClassKnowledgeDo) FindInBatches(result *[]*models.UserClassKnowledge, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userClassKnowledgeDo) Attrs(attrs ...field.AssignExpr) *userClassKnowledgeDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userClassKnowledgeDo) Assign(attrs ...field.AssignExpr) *userClassKnowledgeDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userClassKnowledgeDo) Joins(fields ...field.RelationField) *userClassKnowledgeDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userClassKnowledgeDo) Preload(fields ...field.RelationField) *userClassKnowledgeDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userClassKnowledgeDo) FirstOrInit() (*models.UserClassKnowledge, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.UserClassKnowledge), nil
	}
}

func (u userClassKnowledgeDo) FirstOrCreate() (*models.UserClassKnowledge, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.UserClassKnowledge), nil
	}
}

func (u userClassKnowledgeDo) FindByPage(offset int, limit int) (result []*models.UserClassKnowledge, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userClassKnowledgeDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userClassKnowledgeDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userClassKnowledgeDo) Delete(models ...*models.UserClassKnowledge) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userClassKnowledgeDo) withDO(do gen.Dao) *userClassKnowledgeDo {
	u.DO = *do.(*gen.DO)
	return u
}
