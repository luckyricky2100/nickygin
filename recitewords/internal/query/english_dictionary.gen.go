// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"nickygin.com/recitewords/internal/models"
)

func newEnglishDictionary(db *gorm.DB, opts ...gen.DOOption) englishDictionary {
	_englishDictionary := englishDictionary{}

	_englishDictionary.englishDictionaryDo.UseDB(db, opts...)
	_englishDictionary.englishDictionaryDo.UseModel(&models.EnglishDictionary{})

	tableName := _englishDictionary.englishDictionaryDo.TableName()
	_englishDictionary.ALL = field.NewAsterisk(tableName)
	_englishDictionary.ID = field.NewInt32(tableName, "id")
	_englishDictionary.Word = field.NewString(tableName, "word")
	_englishDictionary.CreatedOn = field.NewTime(tableName, "created_on")
	_englishDictionary.CreatedBy = field.NewString(tableName, "created_by")
	_englishDictionary.ModifiedOn = field.NewTime(tableName, "modified_on")
	_englishDictionary.ModifiedBy = field.NewString(tableName, "modified_by")
	_englishDictionary.DeletedOn = field.NewTime(tableName, "deleted_on")
	_englishDictionary.IsDel = field.NewInt32(tableName, "is_del")
	_englishDictionary.State = field.NewInt32(tableName, "state")
	_englishDictionary.Chinese = field.NewString(tableName, "chinese")
	_englishDictionary.PartToSpeech = field.NewInt32(tableName, "part_to_speech")
	_englishDictionary.WordClass = field.NewInt32(tableName, "word_class")
	_englishDictionary.Pronounce = field.NewBytes(tableName, "pronounce")

	_englishDictionary.fillFieldMap()

	return _englishDictionary
}

// englishDictionary 英语单词
type englishDictionary struct {
	englishDictionaryDo englishDictionaryDo

	ALL          field.Asterisk
	ID           field.Int32
	Word         field.String // 英文单词
	CreatedOn    field.Time   // 创建时间
	CreatedBy    field.String // 创建人
	ModifiedOn   field.Time   // 修改时间
	ModifiedBy   field.String // 修改人
	DeletedOn    field.Time   // 删除时间
	IsDel        field.Int32  // 是否删除 0为未删除、1为已删除
	State        field.Int32  // 状态 0为禁用、1为启用
	Chinese      field.String // 中文
	PartToSpeech field.Int32  // 词性
	WordClass    field.Int32  // 词汇分级，如四六级单词
	Pronounce    field.Bytes

	fieldMap map[string]field.Expr
}

func (e englishDictionary) Table(newTableName string) *englishDictionary {
	e.englishDictionaryDo.UseTable(newTableName)
	return e.updateTableName(newTableName)
}

func (e englishDictionary) As(alias string) *englishDictionary {
	e.englishDictionaryDo.DO = *(e.englishDictionaryDo.As(alias).(*gen.DO))
	return e.updateTableName(alias)
}

func (e *englishDictionary) updateTableName(table string) *englishDictionary {
	e.ALL = field.NewAsterisk(table)
	e.ID = field.NewInt32(table, "id")
	e.Word = field.NewString(table, "word")
	e.CreatedOn = field.NewTime(table, "created_on")
	e.CreatedBy = field.NewString(table, "created_by")
	e.ModifiedOn = field.NewTime(table, "modified_on")
	e.ModifiedBy = field.NewString(table, "modified_by")
	e.DeletedOn = field.NewTime(table, "deleted_on")
	e.IsDel = field.NewInt32(table, "is_del")
	e.State = field.NewInt32(table, "state")
	e.Chinese = field.NewString(table, "chinese")
	e.PartToSpeech = field.NewInt32(table, "part_to_speech")
	e.WordClass = field.NewInt32(table, "word_class")
	e.Pronounce = field.NewBytes(table, "pronounce")

	e.fillFieldMap()

	return e
}

func (e *englishDictionary) WithContext(ctx context.Context) *englishDictionaryDo {
	return e.englishDictionaryDo.WithContext(ctx)
}

func (e englishDictionary) TableName() string { return e.englishDictionaryDo.TableName() }

func (e englishDictionary) Alias() string { return e.englishDictionaryDo.Alias() }

func (e englishDictionary) Columns(cols ...field.Expr) gen.Columns {
	return e.englishDictionaryDo.Columns(cols...)
}

func (e *englishDictionary) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := e.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (e *englishDictionary) fillFieldMap() {
	e.fieldMap = make(map[string]field.Expr, 13)
	e.fieldMap["id"] = e.ID
	e.fieldMap["word"] = e.Word
	e.fieldMap["created_on"] = e.CreatedOn
	e.fieldMap["created_by"] = e.CreatedBy
	e.fieldMap["modified_on"] = e.ModifiedOn
	e.fieldMap["modified_by"] = e.ModifiedBy
	e.fieldMap["deleted_on"] = e.DeletedOn
	e.fieldMap["is_del"] = e.IsDel
	e.fieldMap["state"] = e.State
	e.fieldMap["chinese"] = e.Chinese
	e.fieldMap["part_to_speech"] = e.PartToSpeech
	e.fieldMap["word_class"] = e.WordClass
	e.fieldMap["pronounce"] = e.Pronounce
}

func (e englishDictionary) clone(db *gorm.DB) englishDictionary {
	e.englishDictionaryDo.ReplaceConnPool(db.Statement.ConnPool)
	return e
}

func (e englishDictionary) replaceDB(db *gorm.DB) englishDictionary {
	e.englishDictionaryDo.ReplaceDB(db)
	return e
}

type englishDictionaryDo struct{ gen.DO }

func (e englishDictionaryDo) Debug() *englishDictionaryDo {
	return e.withDO(e.DO.Debug())
}

func (e englishDictionaryDo) WithContext(ctx context.Context) *englishDictionaryDo {
	return e.withDO(e.DO.WithContext(ctx))
}

func (e englishDictionaryDo) ReadDB() *englishDictionaryDo {
	return e.Clauses(dbresolver.Read)
}

func (e englishDictionaryDo) WriteDB() *englishDictionaryDo {
	return e.Clauses(dbresolver.Write)
}

func (e englishDictionaryDo) Session(config *gorm.Session) *englishDictionaryDo {
	return e.withDO(e.DO.Session(config))
}

func (e englishDictionaryDo) Clauses(conds ...clause.Expression) *englishDictionaryDo {
	return e.withDO(e.DO.Clauses(conds...))
}

func (e englishDictionaryDo) Returning(value interface{}, columns ...string) *englishDictionaryDo {
	return e.withDO(e.DO.Returning(value, columns...))
}

func (e englishDictionaryDo) Not(conds ...gen.Condition) *englishDictionaryDo {
	return e.withDO(e.DO.Not(conds...))
}

func (e englishDictionaryDo) Or(conds ...gen.Condition) *englishDictionaryDo {
	return e.withDO(e.DO.Or(conds...))
}

func (e englishDictionaryDo) Select(conds ...field.Expr) *englishDictionaryDo {
	return e.withDO(e.DO.Select(conds...))
}

func (e englishDictionaryDo) Where(conds ...gen.Condition) *englishDictionaryDo {
	return e.withDO(e.DO.Where(conds...))
}

func (e englishDictionaryDo) Order(conds ...field.Expr) *englishDictionaryDo {
	return e.withDO(e.DO.Order(conds...))
}

func (e englishDictionaryDo) Distinct(cols ...field.Expr) *englishDictionaryDo {
	return e.withDO(e.DO.Distinct(cols...))
}

func (e englishDictionaryDo) Omit(cols ...field.Expr) *englishDictionaryDo {
	return e.withDO(e.DO.Omit(cols...))
}

func (e englishDictionaryDo) Join(table schema.Tabler, on ...field.Expr) *englishDictionaryDo {
	return e.withDO(e.DO.Join(table, on...))
}

func (e englishDictionaryDo) LeftJoin(table schema.Tabler, on ...field.Expr) *englishDictionaryDo {
	return e.withDO(e.DO.LeftJoin(table, on...))
}

func (e englishDictionaryDo) RightJoin(table schema.Tabler, on ...field.Expr) *englishDictionaryDo {
	return e.withDO(e.DO.RightJoin(table, on...))
}

func (e englishDictionaryDo) Group(cols ...field.Expr) *englishDictionaryDo {
	return e.withDO(e.DO.Group(cols...))
}

func (e englishDictionaryDo) Having(conds ...gen.Condition) *englishDictionaryDo {
	return e.withDO(e.DO.Having(conds...))
}

func (e englishDictionaryDo) Limit(limit int) *englishDictionaryDo {
	return e.withDO(e.DO.Limit(limit))
}

func (e englishDictionaryDo) Offset(offset int) *englishDictionaryDo {
	return e.withDO(e.DO.Offset(offset))
}

func (e englishDictionaryDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *englishDictionaryDo {
	return e.withDO(e.DO.Scopes(funcs...))
}

func (e englishDictionaryDo) Unscoped() *englishDictionaryDo {
	return e.withDO(e.DO.Unscoped())
}

func (e englishDictionaryDo) Create(values ...*models.EnglishDictionary) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Create(values)
}

func (e englishDictionaryDo) CreateInBatches(values []*models.EnglishDictionary, batchSize int) error {
	return e.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (e englishDictionaryDo) Save(values ...*models.EnglishDictionary) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Save(values)
}

func (e englishDictionaryDo) First() (*models.EnglishDictionary, error) {
	if result, err := e.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.EnglishDictionary), nil
	}
}

func (e englishDictionaryDo) Take() (*models.EnglishDictionary, error) {
	if result, err := e.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.EnglishDictionary), nil
	}
}

func (e englishDictionaryDo) Last() (*models.EnglishDictionary, error) {
	if result, err := e.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.EnglishDictionary), nil
	}
}

func (e englishDictionaryDo) Find() ([]*models.EnglishDictionary, error) {
	result, err := e.DO.Find()
	return result.([]*models.EnglishDictionary), err
}

func (e englishDictionaryDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.EnglishDictionary, err error) {
	buf := make([]*models.EnglishDictionary, 0, batchSize)
	err = e.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (e englishDictionaryDo) FindInBatches(result *[]*models.EnglishDictionary, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return e.DO.FindInBatches(result, batchSize, fc)
}

func (e englishDictionaryDo) Attrs(attrs ...field.AssignExpr) *englishDictionaryDo {
	return e.withDO(e.DO.Attrs(attrs...))
}

func (e englishDictionaryDo) Assign(attrs ...field.AssignExpr) *englishDictionaryDo {
	return e.withDO(e.DO.Assign(attrs...))
}

func (e englishDictionaryDo) Joins(fields ...field.RelationField) *englishDictionaryDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Joins(_f))
	}
	return &e
}

func (e englishDictionaryDo) Preload(fields ...field.RelationField) *englishDictionaryDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Preload(_f))
	}
	return &e
}

func (e englishDictionaryDo) FirstOrInit() (*models.EnglishDictionary, error) {
	if result, err := e.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.EnglishDictionary), nil
	}
}

func (e englishDictionaryDo) FirstOrCreate() (*models.EnglishDictionary, error) {
	if result, err := e.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.EnglishDictionary), nil
	}
}

func (e englishDictionaryDo) FindByPage(offset int, limit int) (result []*models.EnglishDictionary, count int64, err error) {
	result, err = e.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = e.Offset(-1).Limit(-1).Count()
	return
}

func (e englishDictionaryDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = e.Count()
	if err != nil {
		return
	}

	err = e.Offset(offset).Limit(limit).Scan(result)
	return
}

func (e englishDictionaryDo) Scan(result interface{}) (err error) {
	return e.DO.Scan(result)
}

func (e englishDictionaryDo) Delete(models ...*models.EnglishDictionary) (result gen.ResultInfo, err error) {
	return e.DO.Delete(models)
}

func (e *englishDictionaryDo) withDO(do gen.Dao) *englishDictionaryDo {
	e.DO = *do.(*gen.DO)
	return e
}
