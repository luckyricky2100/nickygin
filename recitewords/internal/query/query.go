// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:                 db,
		EnglishDictionary:  newEnglishDictionary(db, opts...),
		RcQueue:            newRcQueue(db, opts...),
		RcRole:             newRcRole(db, opts...),
		RcUser:             newRcUser(db, opts...),
		UserClass:          newUserClass(db, opts...),
		UserClassKnowledge: newUserClassKnowledge(db, opts...),
		UserKnowledge:      newUserKnowledge(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	EnglishDictionary  englishDictionary
	RcQueue            rcQueue
	RcRole             rcRole
	RcUser             rcUser
	UserClass          userClass
	UserClassKnowledge userClassKnowledge
	UserKnowledge      userKnowledge
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:                 db,
		EnglishDictionary:  q.EnglishDictionary.clone(db),
		RcQueue:            q.RcQueue.clone(db),
		RcRole:             q.RcRole.clone(db),
		RcUser:             q.RcUser.clone(db),
		UserClass:          q.UserClass.clone(db),
		UserClassKnowledge: q.UserClassKnowledge.clone(db),
		UserKnowledge:      q.UserKnowledge.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:                 db,
		EnglishDictionary:  q.EnglishDictionary.replaceDB(db),
		RcQueue:            q.RcQueue.replaceDB(db),
		RcRole:             q.RcRole.replaceDB(db),
		RcUser:             q.RcUser.replaceDB(db),
		UserClass:          q.UserClass.replaceDB(db),
		UserClassKnowledge: q.UserClassKnowledge.replaceDB(db),
		UserKnowledge:      q.UserKnowledge.replaceDB(db),
	}
}

type queryCtx struct {
	EnglishDictionary  *englishDictionaryDo
	RcQueue            *rcQueueDo
	RcRole             *rcRoleDo
	RcUser             *rcUserDo
	UserClass          *userClassDo
	UserClassKnowledge *userClassKnowledgeDo
	UserKnowledge      *userKnowledgeDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		EnglishDictionary:  q.EnglishDictionary.WithContext(ctx),
		RcQueue:            q.RcQueue.WithContext(ctx),
		RcRole:             q.RcRole.WithContext(ctx),
		RcUser:             q.RcUser.WithContext(ctx),
		UserClass:          q.UserClass.WithContext(ctx),
		UserClassKnowledge: q.UserClassKnowledge.WithContext(ctx),
		UserKnowledge:      q.UserKnowledge.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
