// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"nickygin.com/recitewords/internal/models"
)

func newRcRole(db *gorm.DB, opts ...gen.DOOption) rcRole {
	_rcRole := rcRole{}

	_rcRole.rcRoleDo.UseDB(db, opts...)
	_rcRole.rcRoleDo.UseModel(&models.RcRole{})

	tableName := _rcRole.rcRoleDo.TableName()
	_rcRole.ALL = field.NewAsterisk(tableName)
	_rcRole.ID = field.NewInt32(tableName, "id")
	_rcRole.CreatedOn = field.NewTime(tableName, "created_on")
	_rcRole.ModifiedOn = field.NewTime(tableName, "modified_on")
	_rcRole.ModifiedBy = field.NewString(tableName, "modified_by")
	_rcRole.DeletedOn = field.NewTime(tableName, "deleted_on")
	_rcRole.IsDel = field.NewInt32(tableName, "is_del")
	_rcRole.RoleName = field.NewString(tableName, "role_name")

	_rcRole.fillFieldMap()

	return _rcRole
}

// rcRole 角色
type rcRole struct {
	rcRoleDo rcRoleDo

	ALL        field.Asterisk
	ID         field.Int32
	CreatedOn  field.Time   // 新建时间
	ModifiedOn field.Time   // 修改时间
	ModifiedBy field.String // 修改人
	DeletedOn  field.Time   // 删除时间
	IsDel      field.Int32  // 是否删除 0为未删除、1为已删除
	RoleName   field.String // Key

	fieldMap map[string]field.Expr
}

func (r rcRole) Table(newTableName string) *rcRole {
	r.rcRoleDo.UseTable(newTableName)
	return r.updateTableName(newTableName)
}

func (r rcRole) As(alias string) *rcRole {
	r.rcRoleDo.DO = *(r.rcRoleDo.As(alias).(*gen.DO))
	return r.updateTableName(alias)
}

func (r *rcRole) updateTableName(table string) *rcRole {
	r.ALL = field.NewAsterisk(table)
	r.ID = field.NewInt32(table, "id")
	r.CreatedOn = field.NewTime(table, "created_on")
	r.ModifiedOn = field.NewTime(table, "modified_on")
	r.ModifiedBy = field.NewString(table, "modified_by")
	r.DeletedOn = field.NewTime(table, "deleted_on")
	r.IsDel = field.NewInt32(table, "is_del")
	r.RoleName = field.NewString(table, "role_name")

	r.fillFieldMap()

	return r
}

func (r *rcRole) WithContext(ctx context.Context) *rcRoleDo { return r.rcRoleDo.WithContext(ctx) }

func (r rcRole) TableName() string { return r.rcRoleDo.TableName() }

func (r rcRole) Alias() string { return r.rcRoleDo.Alias() }

func (r rcRole) Columns(cols ...field.Expr) gen.Columns { return r.rcRoleDo.Columns(cols...) }

func (r *rcRole) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := r.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (r *rcRole) fillFieldMap() {
	r.fieldMap = make(map[string]field.Expr, 7)
	r.fieldMap["id"] = r.ID
	r.fieldMap["created_on"] = r.CreatedOn
	r.fieldMap["modified_on"] = r.ModifiedOn
	r.fieldMap["modified_by"] = r.ModifiedBy
	r.fieldMap["deleted_on"] = r.DeletedOn
	r.fieldMap["is_del"] = r.IsDel
	r.fieldMap["role_name"] = r.RoleName
}

func (r rcRole) clone(db *gorm.DB) rcRole {
	r.rcRoleDo.ReplaceConnPool(db.Statement.ConnPool)
	return r
}

func (r rcRole) replaceDB(db *gorm.DB) rcRole {
	r.rcRoleDo.ReplaceDB(db)
	return r
}

type rcRoleDo struct{ gen.DO }

func (r rcRoleDo) Debug() *rcRoleDo {
	return r.withDO(r.DO.Debug())
}

func (r rcRoleDo) WithContext(ctx context.Context) *rcRoleDo {
	return r.withDO(r.DO.WithContext(ctx))
}

func (r rcRoleDo) ReadDB() *rcRoleDo {
	return r.Clauses(dbresolver.Read)
}

func (r rcRoleDo) WriteDB() *rcRoleDo {
	return r.Clauses(dbresolver.Write)
}

func (r rcRoleDo) Session(config *gorm.Session) *rcRoleDo {
	return r.withDO(r.DO.Session(config))
}

func (r rcRoleDo) Clauses(conds ...clause.Expression) *rcRoleDo {
	return r.withDO(r.DO.Clauses(conds...))
}

func (r rcRoleDo) Returning(value interface{}, columns ...string) *rcRoleDo {
	return r.withDO(r.DO.Returning(value, columns...))
}

func (r rcRoleDo) Not(conds ...gen.Condition) *rcRoleDo {
	return r.withDO(r.DO.Not(conds...))
}

func (r rcRoleDo) Or(conds ...gen.Condition) *rcRoleDo {
	return r.withDO(r.DO.Or(conds...))
}

func (r rcRoleDo) Select(conds ...field.Expr) *rcRoleDo {
	return r.withDO(r.DO.Select(conds...))
}

func (r rcRoleDo) Where(conds ...gen.Condition) *rcRoleDo {
	return r.withDO(r.DO.Where(conds...))
}

func (r rcRoleDo) Order(conds ...field.Expr) *rcRoleDo {
	return r.withDO(r.DO.Order(conds...))
}

func (r rcRoleDo) Distinct(cols ...field.Expr) *rcRoleDo {
	return r.withDO(r.DO.Distinct(cols...))
}

func (r rcRoleDo) Omit(cols ...field.Expr) *rcRoleDo {
	return r.withDO(r.DO.Omit(cols...))
}

func (r rcRoleDo) Join(table schema.Tabler, on ...field.Expr) *rcRoleDo {
	return r.withDO(r.DO.Join(table, on...))
}

func (r rcRoleDo) LeftJoin(table schema.Tabler, on ...field.Expr) *rcRoleDo {
	return r.withDO(r.DO.LeftJoin(table, on...))
}

func (r rcRoleDo) RightJoin(table schema.Tabler, on ...field.Expr) *rcRoleDo {
	return r.withDO(r.DO.RightJoin(table, on...))
}

func (r rcRoleDo) Group(cols ...field.Expr) *rcRoleDo {
	return r.withDO(r.DO.Group(cols...))
}

func (r rcRoleDo) Having(conds ...gen.Condition) *rcRoleDo {
	return r.withDO(r.DO.Having(conds...))
}

func (r rcRoleDo) Limit(limit int) *rcRoleDo {
	return r.withDO(r.DO.Limit(limit))
}

func (r rcRoleDo) Offset(offset int) *rcRoleDo {
	return r.withDO(r.DO.Offset(offset))
}

func (r rcRoleDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *rcRoleDo {
	return r.withDO(r.DO.Scopes(funcs...))
}

func (r rcRoleDo) Unscoped() *rcRoleDo {
	return r.withDO(r.DO.Unscoped())
}

func (r rcRoleDo) Create(values ...*models.RcRole) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Create(values)
}

func (r rcRoleDo) CreateInBatches(values []*models.RcRole, batchSize int) error {
	return r.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (r rcRoleDo) Save(values ...*models.RcRole) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Save(values)
}

func (r rcRoleDo) First() (*models.RcRole, error) {
	if result, err := r.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.RcRole), nil
	}
}

func (r rcRoleDo) Take() (*models.RcRole, error) {
	if result, err := r.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.RcRole), nil
	}
}

func (r rcRoleDo) Last() (*models.RcRole, error) {
	if result, err := r.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.RcRole), nil
	}
}

func (r rcRoleDo) Find() ([]*models.RcRole, error) {
	result, err := r.DO.Find()
	return result.([]*models.RcRole), err
}

func (r rcRoleDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.RcRole, err error) {
	buf := make([]*models.RcRole, 0, batchSize)
	err = r.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (r rcRoleDo) FindInBatches(result *[]*models.RcRole, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return r.DO.FindInBatches(result, batchSize, fc)
}

func (r rcRoleDo) Attrs(attrs ...field.AssignExpr) *rcRoleDo {
	return r.withDO(r.DO.Attrs(attrs...))
}

func (r rcRoleDo) Assign(attrs ...field.AssignExpr) *rcRoleDo {
	return r.withDO(r.DO.Assign(attrs...))
}

func (r rcRoleDo) Joins(fields ...field.RelationField) *rcRoleDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Joins(_f))
	}
	return &r
}

func (r rcRoleDo) Preload(fields ...field.RelationField) *rcRoleDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Preload(_f))
	}
	return &r
}

func (r rcRoleDo) FirstOrInit() (*models.RcRole, error) {
	if result, err := r.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.RcRole), nil
	}
}

func (r rcRoleDo) FirstOrCreate() (*models.RcRole, error) {
	if result, err := r.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.RcRole), nil
	}
}

func (r rcRoleDo) FindByPage(offset int, limit int) (result []*models.RcRole, count int64, err error) {
	result, err = r.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = r.Offset(-1).Limit(-1).Count()
	return
}

func (r rcRoleDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = r.Count()
	if err != nil {
		return
	}

	err = r.Offset(offset).Limit(limit).Scan(result)
	return
}

func (r rcRoleDo) Scan(result interface{}) (err error) {
	return r.DO.Scan(result)
}

func (r rcRoleDo) Delete(models ...*models.RcRole) (result gen.ResultInfo, err error) {
	return r.DO.Delete(models)
}

func (r *rcRoleDo) withDO(do gen.Dao) *rcRoleDo {
	r.DO = *do.(*gen.DO)
	return r
}
